{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","explain","react_default","a","createElement","src","alt","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","rating","synopsis","Movie_MoviePoster","map","index","Movie_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovie","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","this","fetch","then","movieData","json","data","catch","err","console","log","_renderMovies","movie","src_Movie_0","concat","title_english","medium_cover_image","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAmCMA,SAAc,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,QAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQM,IAAKL,EAASM,MAAON,EAASO,UAAU,oBAK5DC,EAAa,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAClB,OACIT,EAAAC,EAAAC,cAAA,QAAMI,UAAU,gBAAhB,IAAiCG,EAAjC,MAqBOC,EA3DD,SAAAC,GAAiD,IAA9CN,EAA8CM,EAA9CN,MAAOP,EAAuCa,EAAvCb,OAAQc,EAA+BD,EAA/BC,OAAQC,EAAuBF,EAAvBE,OAAQC,EAAeH,EAAfG,SAC5C,OACId,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAACa,EAAD,CAAajB,OAAQA,EAAQC,QAASM,KAE1CL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAAA,UAAKG,GACLL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACVM,EAAOI,IAAI,SAACP,EAAOQ,GAAR,OAAkBjB,EAAAC,EAAAC,cAACgB,EAAD,CAAYT,MAAOA,EAAOU,IAAKF,OAEjEjB,EAAAC,EAAAC,cAAA,MAAII,UAAWO,GAAU,EAAI,gBAAkB,qBAC1CA,GAELb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACXN,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACIoB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCyFjBC,6MAzCbC,MAAQ,KAKRC,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWC,EAAKC,WADhB,OACJP,EADIG,EAAAK,KAEVF,EAAKG,SAAS,CAAET,WAFN,wBAAAG,EAAAO,SAAAX,EAAAY,WAKZJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAc,OAAOA,EAAUC,SACpCF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKhB,SACvBiB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,cAAgB,WAWd,OAVef,EAAKT,MAAMG,OAAOd,IAAI,SAACoC,EAAOnC,GAC3C,OAAOjB,EAAAC,EAAAC,cAACmD,EAAD,CACPhD,MAAK,IAAAiD,OAAQrC,EAAM,EAAd,KAAAqC,OAAoBF,EAAMG,eAC/BzD,OAAUsD,EAAMI,mBAChBrC,IAAOiC,EAAMK,GACb7C,OAAUwC,EAAMxC,OAChBC,OAAUuC,EAAMvC,OAChBC,SAAYsC,EAAMtC,iGAvBpB2B,KAAKb,6CA6BE,IACAE,EAAUW,KAAKd,MAAfG,OACP,OACE9B,EAAAC,EAAAC,cAAA,OAAKI,UAAWwB,EAAS,MAAQ,gBAC9BW,KAAKd,MAAMG,OAASW,KAAKU,gBAAkB,kBAjGlCO,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.b41a0571.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\n//movie card component\nconst Movie = ({ title, poster, genres, rating, synopsis }) => {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} explain={title} />\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <h3 className={rating >= 8 ? \"Movie__rating\" : \"Movie__low_rating\"}>\n                    {rating}\n                </h3>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='4'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n//image dumb component\nconst MoviePoster = ({ poster, explain }) => {\n    return (\n        <img src={poster} alt={explain} title={explain} className=\"Movie__Poster\"/>\n    )\n}\n\n//Genre dumb component\nconst MovieGenre = ({ genre }) => {\n    return (\n        <span className=\"Movie__Genre\"> {genre} </span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    rating: PropTypes.number.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    explain: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","//movie list component\nimport React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n/*component 의 life cycle \n  render : componentWillMount() --> render() --> componentDidMount()\n\n  update : componentWillReciveProps() --> shouldComponentUpdate() --> componentWillUpdate() --> render() --> componentDidUpdate() \n*/\n\nclass App extends Component {\n  //state 가 변경될 때 마다 render가 새로 생성 될 것이다.\n  //example state change\n  /*state = {\n    // movies : [\n    //   {\n    //     title : \"신과함께 인과연\",\n    //     poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/9/97/%EC%8B%A0%EA%B3%BC_%ED%95%A8%EA%BB%98_-_%EC%9D%B8%EA%B3%BC_%EC%97%B0.png/250px-%EC%8B%A0%EA%B3%BC_%ED%95%A8%EA%BB%98_-_%EC%9D%B8%EA%B3%BC_%EC%97%B0.png\"\n    //   },\n    //   {\n    //     title : \"광해\",\n    //     poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/a/a4/%EA%B4%91%ED%95%B4%2C_%EC%99%95%EC%9D%B4_%EB%90%9C_%EB%82%A8%EC%9E%90.jpg/250px-%EA%B4%91%ED%95%B4%2C_%EC%99%95%EC%9D%B4_%EB%90%9C_%EB%82%A8%EC%9E%90.jpg\"\n    //   },\n    //   {\n    //     title : \"아쿠아맨\",\n    //     poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/d/d2/%EC%95%84%EC%BF%A0%EC%95%84%EB%A7%A8_%EC%98%81%ED%99%94.jpg/250px-%EC%95%84%EC%BF%A0%EC%95%84%EB%A7%A8_%EC%98%81%ED%99%94.jpg\"\n    //   },\n    //   {\n    //     title : \"범죄도시\",\n    //     poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/8/87/%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C_2017.jpg/250px-%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C_2017.jpg\"\n    //   },\n    //   {\n    //     title : \"토이 스토리\",\n    //     Qposter : \"http://mblogthumb4.phinf.naver.net/20150721_167/yessok104_1437478621705X7aor_JPEG/toy_story_wallpaper_by_cepillo16.jpg?type=w2\"\n    //   } \n    // ]\n  }\n  componentDidMount(){\n    setTimeout(() => {\n      this.setState({\n        // movies : [\n        //   {\n        //     title : \"토이 스토리\",\n        //     poster : \"http://mblogthumb4.phinf.naver.net/20150721_167/yessok104_1437478621705X7aor_JPEG/toy_story_wallpaper_by_cepillo16.jpg?type=w2\"\n        //   },\n        //   ...this.state.movies\n        // ]\n        movies : [\n          {\n            title : \"신과함께 인과연\",\n            poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/9/97/%EC%8B%A0%EA%B3%BC_%ED%95%A8%EA%BB%98_-_%EC%9D%B8%EA%B3%BC_%EC%97%B0.png/250px-%EC%8B%A0%EA%B3%BC_%ED%95%A8%EA%BB%98_-_%EC%9D%B8%EA%B3%BC_%EC%97%B0.png\"\n          },\n          {\n            title : \"광해\",\n            poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/a/a4/%EA%B4%91%ED%95%B4%2C_%EC%99%95%EC%9D%B4_%EB%90%9C_%EB%82%A8%EC%9E%90.jpg/250px-%EA%B4%91%ED%95%B4%2C_%EC%99%95%EC%9D%B4_%EB%90%9C_%EB%82%A8%EC%9E%90.jpg\"\n          },\n          {\n            title : \"아쿠아맨\",\n            poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/d/d2/%EC%95%84%EC%BF%A0%EC%95%84%EB%A7%A8_%EC%98%81%ED%99%94.jpg/250px-%EC%95%84%EC%BF%A0%EC%95%84%EB%A7%A8_%EC%98%81%ED%99%94.jpg\"\n          },\n          {\n            title : \"범죄도시\",\n            poster : \"https://upload.wikimedia.org/wikipedia/ko/thumb/8/87/%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C_2017.jpg/250px-%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C_2017.jpg\"\n          },\n          {\n            title : \"토이 스토리\",\n            poster : \"http://mblogthumb4.phinf.naver.net/20150721_167/yessok104_1437478621705X7aor_JPEG/toy_story_wallpaper_by_cepillo16.jpg?type=w2\"\n          }, \n        ]\n      })\n    }, 2000);\n  }*/\n  state = {}\n  componentDidMount(){\n    this._getMovie();\n  }\n\n  _getMovie = async () => {\n    const movies = await this._callApi();\n    this.setState({ movies });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(movieData => {return movieData.json()})\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      return <Movie \n      title = {`#${index+1} ${ movie.title_english}`} \n      poster = {movie.medium_cover_image} \n      key = {movie.id}\n      genres = {movie.genres}\n      rating = {movie.rating}\n      synopsis = {movie.synopsis}\n      />\n    })\n    return movies;\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}